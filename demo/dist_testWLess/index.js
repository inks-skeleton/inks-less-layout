!function(n){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(n,t){!function(n,e){if(!b[n]||!g[n])return;for(var t in g[n]=!1,e)Object.prototype.hasOwnProperty.call(e,t)&&(h[t]=e[t]);0==--m&&0===y&&k()}(n,t),e&&e(n,t)};var t,o=!0,s="ad3271512e8c43b75e5b",i={},r=[],l=[];function d(n){var e=H[n];if(!e)return O;var o=function(o){return e.hot.active?(H[o]?-1===H[o].parents.indexOf(n)&&H[o].parents.push(n):(r=[n],t=o),-1===e.children.indexOf(o)&&e.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+n),r=[]),O(o)},s=function(n){return{configurable:!0,enumerable:!0,get:function(){return O[n]},set:function(e){O[n]=e}}};for(var i in O)Object.prototype.hasOwnProperty.call(O,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(o,i,s(i));return o.e=function(n){return"ready"===u&&p("prepare"),y++,O.e(n).then(e,(function(n){throw e(),n}));function e(){y--,"prepare"===u&&(x[n]||_(n),0===y&&0===m&&k())}},o.t=function(n,e){return 1&e&&(n=o(n)),O.t(n,-2&e)},o}function a(n){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==n,active:!0,accept:function(n,t){if(void 0===n)e._selfAccepted=!0;else if("function"==typeof n)e._selfAccepted=n;else if("object"==typeof n)for(var o=0;o<n.length;o++)e._acceptedDependencies[n[o]]=t||function(){};else e._acceptedDependencies[n]=t||function(){}},decline:function(n){if(void 0===n)e._selfDeclined=!0;else if("object"==typeof n)for(var t=0;t<n.length;t++)e._declinedDependencies[n[t]]=!0;else e._declinedDependencies[n]=!0},dispose:function(n){e._disposeHandlers.push(n)},addDisposeHandler:function(n){e._disposeHandlers.push(n)},removeDisposeHandler:function(n){var t=e._disposeHandlers.indexOf(n);t>=0&&e._disposeHandlers.splice(t,1)},check:j,apply:S,status:function(n){if(!n)return u;c.push(n)},addStatusHandler:function(n){c.push(n)},removeStatusHandler:function(n){var e=c.indexOf(n);e>=0&&c.splice(e,1)},data:i[n]};return t=void 0,e}var c=[],u="idle";function p(n){u=n;for(var e=0;e<c.length;e++)c[e].call(null,n)}var f,h,w,m=0,y=0,x={},g={},b={};function v(n){return+n+""===n?+n:n}function j(n){if("idle"!==u)throw new Error("check() is only allowed in idle status");return o=n,p("check"),(e=1e4,e=e||1e4,new Promise((function(n,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var o=new XMLHttpRequest,i=O.p+""+s+".hot-update.json";o.open("GET",i,!0),o.timeout=e,o.send(null)}catch(n){return t(n)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)t(new Error("Manifest request to "+i+" timed out."));else if(404===o.status)n();else if(200!==o.status&&304!==o.status)t(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(o.responseText)}catch(n){return void t(n)}n(e)}}}))).then((function(n){if(!n)return p("idle"),null;g={},x={},b=n.c,w=n.h,p("prepare");var e=new Promise((function(n,e){f={resolve:n,reject:e}}));h={};return _(0),"prepare"===u&&0===y&&0===m&&k(),e}));var e}function _(n){b[n]?(g[n]=!0,m++,function(n){var e=document.createElement("script");e.charset="utf-8",e.src=O.p+""+n+"."+s+".hot-update.js",document.head.appendChild(e)}(n)):x[n]=!0}function k(){p("ready");var n=f;if(f=null,n)if(o)Promise.resolve().then((function(){return S(o)})).then((function(e){n.resolve(e)}),(function(e){n.reject(e)}));else{var e=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&e.push(v(t));n.resolve(e)}}function S(e){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,o,l,d,a;function c(n){for(var e=[n],t={},o=e.map((function(n){return{chain:[n],id:n}}));o.length>0;){var s=o.pop(),i=s.id,r=s.chain;if((d=H[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:r,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:r,moduleId:i};for(var l=0;l<d.parents.length;l++){var a=d.parents[l],c=H[a];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:r.concat([a]),moduleId:i,parentId:a};-1===e.indexOf(a)&&(c.hot._acceptedDependencies[i]?(t[a]||(t[a]=[]),f(t[a],[i])):(delete t[a],e.push(a),o.push({chain:r.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:n,outdatedModules:e,outdatedDependencies:t}}function f(n,e){for(var t=0;t<e.length;t++){var o=e[t];-1===n.indexOf(o)&&n.push(o)}}e=e||{};var m={},y=[],x={},g=function(){console.warn("[HMR] unexpected require("+_.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var _;a=v(j);var k=!1,S=!1,E=!1,z="";switch((_=h[j]?c(a):{type:"disposed",moduleId:j}).chain&&(z="\nUpdate propagation: "+_.chain.join(" -> ")),_.type){case"self-declined":e.onDeclined&&e.onDeclined(_),e.ignoreDeclined||(k=new Error("Aborted because of self decline: "+_.moduleId+z));break;case"declined":e.onDeclined&&e.onDeclined(_),e.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+_.moduleId+" in "+_.parentId+z));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(_),e.ignoreUnaccepted||(k=new Error("Aborted because "+a+" is not accepted"+z));break;case"accepted":e.onAccepted&&e.onAccepted(_),S=!0;break;case"disposed":e.onDisposed&&e.onDisposed(_),E=!0;break;default:throw new Error("Unexception type "+_.type)}if(k)return p("abort"),Promise.reject(k);if(S)for(a in x[a]=h[a],f(y,_.outdatedModules),_.outdatedDependencies)Object.prototype.hasOwnProperty.call(_.outdatedDependencies,a)&&(m[a]||(m[a]=[]),f(m[a],_.outdatedDependencies[a]));E&&(f(y,[_.moduleId]),x[a]=g)}var M,L=[];for(o=0;o<y.length;o++)a=y[o],H[a]&&H[a].hot._selfAccepted&&x[a]!==g&&L.push({module:a,errorHandler:H[a].hot._selfAccepted});p("dispose"),Object.keys(b).forEach((function(n){!1===b[n]&&function(n){delete installedChunks[n]}(n)}));for(var D,C,I=y.slice();I.length>0;)if(a=I.pop(),d=H[a]){var P={},T=d.hot._disposeHandlers;for(l=0;l<T.length;l++)(t=T[l])(P);for(i[a]=P,d.hot.active=!1,delete H[a],delete m[a],l=0;l<d.children.length;l++){var N=H[d.children[l]];N&&((M=N.parents.indexOf(a))>=0&&N.parents.splice(M,1))}}for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(d=H[a]))for(C=m[a],l=0;l<C.length;l++)D=C[l],(M=d.children.indexOf(D))>=0&&d.children.splice(M,1);for(a in p("apply"),s=w,x)Object.prototype.hasOwnProperty.call(x,a)&&(n[a]=x[a]);var A=null;for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(d=H[a])){C=m[a];var U=[];for(o=0;o<C.length;o++)if(D=C[o],t=d.hot._acceptedDependencies[D]){if(-1!==U.indexOf(t))continue;U.push(t)}for(o=0;o<U.length;o++){t=U[o];try{t(C)}catch(n){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:C[o],error:n}),e.ignoreErrored||A||(A=n)}}}for(o=0;o<L.length;o++){var q=L[o];a=q.module,r=[a];try{O(a)}catch(n){if("function"==typeof q.errorHandler)try{q.errorHandler(n)}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:t,originalError:n}),e.ignoreErrored||A||(A=t),A||(A=n)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:a,error:n}),e.ignoreErrored||A||(A=n)}}return A?(p("fail"),Promise.reject(A)):(p("idle"),new Promise((function(n){n(y)})))}var H={};function O(e){if(H[e])return H[e].exports;var t=H[e]={i:e,l:!1,exports:{},hot:a(e),parents:(l=r,r=[],l),children:[]};return n[e].call(t.exports,t,t.exports,d(e)),t.l=!0,t.exports}O.m=n,O.c=H,O.d=function(n,e,t){O.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},O.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},O.t=function(n,e){if(1&e&&(n=O(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(O.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)O.d(t,o,function(e){return n[e]}.bind(null,o));return t},O.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return O.d(e,"a",e),e},O.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},O.p="",O.h=function(){return s},d("./test/index.js")(O.s="./test/index.js")}({"./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./packages/loader/layout-simple.less":function(n,e,t){(e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/runtime/api.js")(!1)).push([n.i,'.ly-box {\n  box-sizing: border-box;\n}\n.ly-top-ib,\n.ly-ver-cen {\n  display: inline-block;\n  vertical-align: top;\n}\n.ly-cen-ib {\n  display: inline-block;\n  vertical-align: middle;\n}\n.ly-ver-cen {\n  height: 100%;\n}\n.ly-fl {\n  float: left;\n}\n.ly-fr {\n  float: right;\n}\n.ly-wh100,\n.ly-wh100-b {\n  width: 100%;\n  height: 100%;\n}\n.ly-wh100-b {\n  display: block;\n}\n.ly-flex,\n.ly-flex-cen,\n.ly-flex-between,\n.ly-flex-around {\n  display: flex;\n  align-items: center;\n}\n.ly-flex-cen {\n  justify-content: center;\n}\n.ly-flex-between {\n  justify-content: space-between;\n}\n.ly-flex-around {\n  justify-content: space-around;\n}\n.ly-full-loc {\n  position: fixed;\n  left: 0;\n  width: 100%;\n}\n.ly-vihide {\n  visibility: hidden;\n}\n.ly-scroll {\n  -webkit-overflow-scrolling: touch;\n}\n.ly-disable-touch {\n  touch-action: none;\n}\n.img-r {\n  width: auto;\n  height: auto;\n  max-width: 100%;\n  max-height: 100%;\n}\n.img-r-w100mh {\n  width: 100%;\n  height: auto;\n  max-height: 100%;\n}\n.img-r-h100mw {\n  height: 100%;\n  width: auto;\n  max-width: 100%;\n}\n.img-r-mw100 {\n  width: auto;\n  max-width: 100%;\n}\n.img-r-mh100 {\n  height: auto;\n  max-height: 100%;\n}\n.txt-blod {\n  font-weight: bold;\n}\n.txt-normal {\n  font-weight: normal;\n}\n.txt-light {\n  font-weight: lighter;\n}\n.txt-l {\n  text-align: left;\n}\n.txt-c {\n  text-align: center;\n}\n.txt-r {\n  text-align: right;\n}\n.txt-ellipsis {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.txt-mellipsis {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.txt-nowrap {\n  white-space: nowrap;\n}\n.clearfixAll {\n  display: block;\n  clear: both;\n  float: none;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 0.01px;\n  border: 0.01px solid transparent;\n  overflow: hidden;\n}\nbody,\ndiv,\ndl,\ndt,\ndd,\nul,\nol,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\npre,\ncode,\nform,\nfieldset,\nlegend,\ninput,\nbutton,\ntextarea,\np,\nblockquote,\nth,\ntd {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}\nbody,\na,\nbutton,\ninput,\nselect,\ntextarea,\ntd,\nth,\ncaption {\n  font-size: 14;\n  font-family: -apple-system, "Noto Sans", "Helvetica Neue", Helvetica, "Nimbus Sans L", Arial, "Liberation Sans", "PingFang SC", "Hiragino Sans GB", "Noto Sans CJK SC", "Source Han Sans SC", "Source Han Sans CN", "Microsoft YaHei", "Wenquanyi Micro Hei", "WenQuanYi Zen Hei", "ST Heiti", SimHei, "WenQuanYi Zen Hei Sharp", sans-serif;\n  color: #000;\n}\ninput[type="button"],\ninput[type="submit"],\nbutton,\nselect,\na {\n  cursor: pointer;\n}\nhtml {\n  overflow-y: scroll;\n}\nol,\nul,\nli {\n  list-style: none;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\naddress,\ncaption,\ncite,\ncode,\ndfn,\nem,\nstrong,\nth,\nvar {\n  font-weight: normal;\n}\nbody {\n  background: #f3f3f3;\n}\na {\n  text-decoration: none;\n}\ninput,\nbutton,\nselect,\ntextarea,\na {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\ninput,\nbutton,\nselect,\ntextarea {\n  outline: none;\n  background: none;\n  -webkit-appearance: none;\n}\ninput:disabled {\n  -webkit-opacity: 1;\n}\nbody,\nhtml {\n  width: 100%;\n  min-width: 320px;\n}\nbody,\na,\nbutton,\ninput,\nselect,\ntextarea,\ntd,\nth,\ncaption {\n  font-size: 14px;\n  font-family: -apple-system, "Noto Sans", "Helvetica Neue", Helvetica, "Nimbus Sans L", Arial, "Liberation Sans", "PingFang SC", "Hiragino Sans GB", "Noto Sans CJK SC", "Source Han Sans SC", "Source Han Sans CN", "Microsoft YaHei", "Wenquanyi Micro Hei", "WenQuanYi Zen Hei", "ST Heiti", SimHei, "WenQuanYi Zen Hei Sharp", sans-serif;\n  color: #000;\n}\n@media (max-width: 960px) {\n  html {\n    font-size: 100px;\n  }\n  body,\n  a,\n  button,\n  input,\n  select,\n  textarea,\n  td,\n  th,\n  caption {\n    font-size: 0.24rem;\n  }\n}\n.txt-default {\n  font-size: 14px;\n}\n.txt-fs1 {\n  font-size: 12px;\n}\n.txt-fs2 {\n  font-size: 14px;\n}\n.txt-fs3 {\n  font-size: 16px;\n}\n.txt-fs4 {\n  font-size: 18px;\n}\n.txt-fs5 {\n  font-size: 20px;\n}\n.txt-fs6 {\n  font-size: 22px;\n}\n.txt-fs7 {\n  font-size: 24px;\n}\n.txt-fs8 {\n  font-size: 26px;\n}\n.txt-fs9 {\n  font-size: 28px;\n}\n.txt-fs10 {\n  font-size: 30px;\n}\n@media (max-width: 960px) {\n  .txt-default {\n    font-size: 0.24rem;\n  }\n  .txt-fs1 {\n    font-size: 0.22rem;\n  }\n  .txt-fs2 {\n    font-size: 0.24rem;\n  }\n  .txt-fs3 {\n    font-size: 0.26rem;\n  }\n  .txt-fs4 {\n    font-size: 0.28rem;\n  }\n  .txt-fs5 {\n    font-size: 0.3rem;\n  }\n  .txt-fs6 {\n    font-size: 0.32rem;\n  }\n  .txt-fs7 {\n    font-size: 0.34rem;\n  }\n  .txt-fs8 {\n    font-size: 0.36rem;\n  }\n  .txt-fs9 {\n    font-size: 0.38rem;\n  }\n  .txt-fs10 {\n    font-size: 0.4rem;\n  }\n}\n.container {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 1200;\n}\n.row {\n  margin: 0 auto;\n  font-size: 0;\n  box-sizing: border-box;\n}\n.row::after {\n  content: "";\n  display: block;\n  clear: both;\n  float: none;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 0.01px;\n  border: 0.01px solid transparent;\n  overflow: hidden;\n}\n.row [class*="col"] {\n  display: inline-block;\n  vertical-align: top;\n}\n.hidden {\n  display: none;\n}\n.visible {\n  display: block;\n}\n.visible-ib {\n  display: inline-block;\n}\n.visible-il {\n  display: inline;\n}\n.row .col-1 {\n  width: 8%;\n}\n.row .col-2 {\n  width: 17%;\n}\n.row .col-3 {\n  width: 25%;\n}\n.row .col-4 {\n  width: 33%;\n}\n.row .col-5 {\n  width: 42%;\n}\n.row .col-6 {\n  width: 50%;\n}\n.row .col-7 {\n  width: 58%;\n}\n.row .col-8 {\n  width: 67%;\n}\n.row .col-9 {\n  width: 75%;\n}\n.row .col-10 {\n  width: 83%;\n}\n.row .col-11 {\n  width: 92%;\n}\n.row .col-12 {\n  width: 100%;\n}\n@media (max-width: 1200px) {\n  .hidden-xl {\n    display: none;\n  }\n  .visible-ib-xl {\n    display: inline-block;\n  }\n  .visible-il-xl {\n    display: inline;\n  }\n  .row .col-xl-1 {\n    width: 8%;\n  }\n  .row .col-xl-2 {\n    width: 17%;\n  }\n  .row .col-xl-3 {\n    width: 25%;\n  }\n  .row .col-xl-4 {\n    width: 33%;\n  }\n  .row .col-xl-5 {\n    width: 42%;\n  }\n  .row .col-xl-6 {\n    width: 50%;\n  }\n  .row .col-xl-7 {\n    width: 58%;\n  }\n  .row .col-xl-8 {\n    width: 67%;\n  }\n  .row .col-xl-9 {\n    width: 75%;\n  }\n  .row .col-xl-10 {\n    width: 83%;\n  }\n  .row .col-xl-11 {\n    width: 92%;\n  }\n  .row .col-xl-12 {\n    width: 100%;\n  }\n}\n@media (max-width: 960px) {\n  .hidden-lg {\n    display: none;\n  }\n  .visible-ib-lg {\n    display: inline-block;\n  }\n  .visible-il-lg {\n    display: inline;\n  }\n  .row .col-lg-1 {\n    width: 8%;\n  }\n  .row .col-lg-2 {\n    width: 17%;\n  }\n  .row .col-lg-3 {\n    width: 25%;\n  }\n  .row .col-lg-4 {\n    width: 33%;\n  }\n  .row .col-lg-5 {\n    width: 42%;\n  }\n  .row .col-lg-6 {\n    width: 50%;\n  }\n  .row .col-lg-7 {\n    width: 58%;\n  }\n  .row .col-lg-8 {\n    width: 67%;\n  }\n  .row .col-lg-9 {\n    width: 75%;\n  }\n  .row .col-lg-10 {\n    width: 83%;\n  }\n  .row .col-lg-11 {\n    width: 92%;\n  }\n  .row .col-lg-12 {\n    width: 100%;\n  }\n}\n@media (max-width: 720px) {\n  .hidden-md {\n    display: none;\n  }\n  .visible-ib-md {\n    display: inline-block;\n  }\n  .visible-il-md {\n    display: inline;\n  }\n  .row .col-md-1 {\n    width: 8%;\n  }\n  .row .col-md-2 {\n    width: 17%;\n  }\n  .row .col-md-3 {\n    width: 25%;\n  }\n  .row .col-md-4 {\n    width: 33%;\n  }\n  .row .col-md-5 {\n    width: 42%;\n  }\n  .row .col-md-6 {\n    width: 50%;\n  }\n  .row .col-md-7 {\n    width: 58%;\n  }\n  .row .col-md-8 {\n    width: 67%;\n  }\n  .row .col-md-9 {\n    width: 75%;\n  }\n  .row .col-md-10 {\n    width: 83%;\n  }\n  .row .col-md-11 {\n    width: 92%;\n  }\n  .row .col-md-12 {\n    width: 100%;\n  }\n}\n@media (max-width: 540px) {\n  .hidden-sm {\n    display: none;\n  }\n  .visible-ib-sm {\n    display: inline-block;\n  }\n  .visible-il-sm {\n    display: inline;\n  }\n  .row .col-sm-1 {\n    width: 8%;\n  }\n  .row .col-sm-2 {\n    width: 17%;\n  }\n  .row .col-sm-3 {\n    width: 25%;\n  }\n  .row .col-sm-4 {\n    width: 33%;\n  }\n  .row .col-sm-5 {\n    width: 42%;\n  }\n  .row .col-sm-6 {\n    width: 50%;\n  }\n  .row .col-sm-7 {\n    width: 58%;\n  }\n  .row .col-sm-8 {\n    width: 67%;\n  }\n  .row .col-sm-9 {\n    width: 75%;\n  }\n  .row .col-sm-10 {\n    width: 83%;\n  }\n  .row .col-sm-11 {\n    width: 92%;\n  }\n  .row .col-sm-12 {\n    width: 100%;\n  }\n}\n@media (max-width: 360px) {\n  .hidden-xs {\n    display: none;\n  }\n  .visible-ib-xs {\n    display: inline-block;\n  }\n  .visible-il-xs {\n    display: inline;\n  }\n  .row .col-xs-1 {\n    width: 8%;\n  }\n  .row .col-xs-2 {\n    width: 17%;\n  }\n  .row .col-xs-3 {\n    width: 25%;\n  }\n  .row .col-xs-4 {\n    width: 33%;\n  }\n  .row .col-xs-5 {\n    width: 42%;\n  }\n  .row .col-xs-6 {\n    width: 50%;\n  }\n  .row .col-xs-7 {\n    width: 58%;\n  }\n  .row .col-xs-8 {\n    width: 67%;\n  }\n  .row .col-xs-9 {\n    width: 75%;\n  }\n  .row .col-xs-10 {\n    width: 83%;\n  }\n  .row .col-xs-11 {\n    width: 92%;\n  }\n  .row .col-xs-12 {\n    width: 100%;\n  }\n}\n',""]),n.exports=e},"./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test.less":function(n,e,t){(e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/runtime/api.js")(!1)).push([n.i,".test {\n  height: 25px;\n  display: block;\n  clear: both;\n  float: none;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 0.01px;\n  border: 0.01px solid transparent;\n  overflow: hidden;\n  background-color: #000;\n}\n.test_ls {\n  width: 58px;\n  height: 32px;\n  background-color: #eee;\n}\n@media (max-width: 960px) {\n  .test {\n    height: 0.5rem;\n  }\n  .test_ls {\n    width: 1.16rem;\n  }\n  .test_ls {\n    height: 0.64rem;\n  }\n}\n",""]),n.exports=e},"./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test2.less":function(n,e,t){(e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/runtime/api.js")(!1)).push([n.i,".test_uu {\n  width: 58px;\n  height: 32px;\n  background-color: red;\n}\n@media (max-width: 960px) {\n  .test_uu {\n    width: 1.16rem;\n  }\n  .test_uu {\n    height: 0.64rem;\n  }\n}\n",""]),n.exports=e},"./node_modules/_css-loader@3.4.1@css-loader/dist/runtime/api.js":function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var s=(r=o,l=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(d," */")),i=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([s]).join("\n")}var r,l,d;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o=0;o<n.length;o++){var s=[].concat(n[o]);t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s)}},e}},"./node_modules/_style-loader@1.1.2@style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(n,e,t){"use strict";var o,s=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),r={};function l(n,e,t){for(var o=0;o<e.length;o++){var s={css:e[o][1],media:e[o][2],sourceMap:e[o][3]};r[n][o]?r[n][o](s):r[n].push(w(s,t))}}function d(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var s=t.nc;s&&(o.nonce=s)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var r=i(n.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var a,c=(a=[],function(n,e){return a[n]=e,a.filter(Boolean).join("\n")});function u(n,e,t,o){var s=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=c(e,s);else{var i=document.createTextNode(s),r=n.childNodes;r[e]&&n.removeChild(r[e]),r.length?n.insertBefore(i,r[e]):n.appendChild(i)}}function p(n,e,t){var o=t.css,s=t.media,i=t.sourceMap;if(s?n.setAttribute("media",s):n.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var f=null,h=0;function w(n,e){var t,o,s;if(e.singleton){var i=h++;t=f||(f=d(e)),o=u.bind(null,t,i,!1),s=u.bind(null,t,i,!0)}else t=d(e),o=p.bind(null,t,e),s=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else s()}}n.exports=function(n,e,t){return(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=s()),n=t.base?n+t.base:n,e=e||[],r[n]||(r[n]=[]),l(n,e,t),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){r[n]||(r[n]=[]),l(n,e,t);for(var o=e.length;o<r[n].length;o++)r[n][o]();r[n].length=e.length,0===r[n].length&&delete r[n]}}}},"./packages/loader/layout-simple.js":function(n,e){!function(n){var e,t=n.document,o=t.documentElement,s="orientationchange"in n?"orientationchange":"resize";function i(){var n=t.body.clientWidth||o.clientWidth;n<320&&(n=320),n>960&&(n=960),o.style.fontSize=100*n/720+"px"}n.addEventListener&&(n.addEventListener(s,(function(){n.clearTimeout(e),e=n.setTimeout(i,300)}),!1),n.addEventListener("pageshow",(function(t){t.persisted&&(n.clearTimeout(e),e=n.setTimeout(i,300))}),!1),n.addEventListener("DOMContentLoaded",i,!1))}(window)},"./packages/loader/layout-simple.less":function(n,e,t){var o=t("./node_modules/_style-loader@1.1.2@style-loader/dist/runtime/injectStylesIntoStyleTag.js"),s=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./packages/loader/layout-simple.less");"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[n.i,s,""]]);var i={insert:"head",singleton:!1},r=o(n.i,s,i),l=s.locals?s.locals:{};s.locals||n.hot.accept("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./packages/loader/layout-simple.less",(function(){var e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./packages/loader/layout-simple.less");"string"==typeof(e=e.__esModule?e.default:e)&&(e=[[n.i,e,""]]),r(e)})),n.hot.dispose((function(){r()})),n.exports=l},"./test/index.js":function(n,e,t){"use strict";t.r(e);t("./packages/loader/layout-simple.less"),t("./packages/loader/layout-simple.js"),t("./test/js/test.js"),t("./test/less/test.less"),t("./test/less/test2.less"),document.createElement("div")},"./test/js/test.js":function(n,e){var t=document.createElement("div");t.innerHTML="layout simple css demo",document.body.appendChild(t)},"./test/less/test.less":function(n,e,t){var o=t("./node_modules/_style-loader@1.1.2@style-loader/dist/runtime/injectStylesIntoStyleTag.js"),s=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test.less");"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[n.i,s,""]]);var i={insert:"head",singleton:!1},r=o(n.i,s,i),l=s.locals?s.locals:{};s.locals||n.hot.accept("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test.less",(function(){var e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test.less");"string"==typeof(e=e.__esModule?e.default:e)&&(e=[[n.i,e,""]]),r(e)})),n.hot.dispose((function(){r()})),n.exports=l},"./test/less/test2.less":function(n,e,t){var o=t("./node_modules/_style-loader@1.1.2@style-loader/dist/runtime/injectStylesIntoStyleTag.js"),s=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test2.less");"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[n.i,s,""]]);var i={insert:"head",singleton:!1},r=o(n.i,s,i),l=s.locals?s.locals:{};s.locals||n.hot.accept("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test2.less",(function(){var e=t("./node_modules/_css-loader@3.4.1@css-loader/dist/cjs.js!./node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./packages/loader/loaderLess.js?!./test/less/test2.less");"string"==typeof(e=e.__esModule?e.default:e)&&(e=[[n.i,e,""]]),r(e)})),n.hot.dispose((function(){r()})),n.exports=l}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,